The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.



Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

皇后问题，经典回溯。

vector<vector<string>> Matrix::solveNQueens(int n)
{
	vector<vector<string>> result;
	if (n == 0)
		return result;

	vector<int> col(n);
	int k = 0;
	while (k >= 0)
	{
		if (col[k] >= n)
		{
			col[k] = 0;
			k--;
			if (k >= 0)
				col[k]++;
			continue;
		}

		if (!vaildQueen(col, k))
		{
			col[k]++;
		}
		else
		{
			if (k == n - 1)
			{
				vector<string> board;
				for (int i = 0; i < n; i++)
				{
					string row;
					for (int j = 0; j < n; j++)
					{
						if (col[i] == j)
							row.push_back('Q');
						else
							row.push_back('.');
					}
					board.push_back(row);
				}
				result.push_back(board);

				col[k] = 0;
				k--;
				if (k >= 0)
					col[k]++;
			}
			else
			{
				k++;
			}
		}
	}
	return result;
}

bool Matrix::vaildQueen(vector<int>& col, int k)
{
	if (k == 0)
		return true;

	for (int i = 0; i < k; i++)
	{
		if (col[i] == col[k] ||
			col[i] + i == col[k] + k ||
			col[i] - i == col[k] - k)
			return false;
	}
	return true;
}