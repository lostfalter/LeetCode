Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.

click to show follow up.

Follow up:
Did you use extra space?
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

不是很清楚题目的意思，应该没有用额外空间吧，只是会用比较多的时间而已，写写看。

想原地赋值0，发现新赋的0会影响后面的判断，果然还是要额外空间。

让我找到了方法，把第一列和第一行存储置0的行列结果，一开始先判断第一行第一列是否置0，只需要两个变量。

写的有点粗糙，行和列的查找可以合并。

void Matrix::setZeroes(vector<vector<int>>& matrix)
{
	int m = matrix.size();
	if (m == 0)
		return;
	int n = matrix[0].size();

	bool firstRowZero = false;
	for (int col = 0; col < n; col++)
	{
		if (matrix[0][col] == 0)
		{
			firstRowZero = true;
			break;
		}
	}

	bool firstColZero = false;
	for (int row = 0; row < m; row++)
	{
		if (matrix[row][0] == 0)
		{
			firstColZero = true;
			break;
		}
	}

	for (int row = 1; row < m; row++)
	{
		for (int col = 0; col < n; col++)
		{
			if (matrix[row][col] == 0)
			{
				matrix[row][0] = 0;
				break;
			}
		}
	}

	for (int col = 1; col < n; col++)
	{
		for (int row = 0; row < m; row++)
		{
			if (matrix[row][col] == 0)
			{
				matrix[0][col] = 0;
				break;
			}
		}
	}

	for (int row = 1; row < m; row++)
	{
		if (matrix[row][0] == 0)
		{
			for (int col = 0; col < n; col++)
				matrix[row][col] = 0;
		}
	}

	for (int col = 1; col < n; col++)
	{
		if (matrix[0][col] == 0)
		{
			for (int row = 0; row < m; row++)
				matrix[row][col] = 0;
		}
	}
	
	if (firstRowZero)
	{
		for (int col = 0; col < n; col++)
			matrix[0][col] = 0;
	}

	if (firstColZero)
	{
		for (int row = 0; row < m; row++)
			matrix[row][0] = 0;
	}

}