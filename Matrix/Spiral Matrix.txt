Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

按照螺旋方式返回一个矩阵中的数字。

考虑只有一行或者一列的情况。

vector<int> Matrix::spiralOrder(vector<vector<int>>& matrix)
{
	vector<int> result;
	int m = matrix.size();
	if (m == 0)
		return result;
	
	int n = matrix[0].size();

	int up = 0;
	int down = m - 1;
	int left = 0;
	int right = n - 1;

	while (left < right && up < down)
	{
		for (int i = left; i <= right; i++)
			result.push_back(matrix[up][i]);

		for (int i = up + 1; i <= down; i++)
			result.push_back(matrix[i][right]);

		for (int i = right - 1; i >= left; i--)
			result.push_back(matrix[down][i]);

		for (int i = down - 1; i >= up + 1; i--)
			result.push_back(matrix[i][left]);

		left++;
		right--;
		up++;
		down--;
	}

	if (up == down)
	{
		for (int i = left; i <= right; i++)
			result.push_back(matrix[up][i]);
	}
	else if (left == right)
	{
		for (int i = up; i <= down; i++)
			result.push_back(matrix[i][left]);
	}

	return result;
}