Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

"((()))", "(()())", "(())()", "()(())", "()()()"

可以考虑生成所有括号的组合，然后判断是否正确。

vector<string> String::generateParenthesis(int n)
{
	vector<string> result;
	if (n <= 0)
		return result;

	vector<int> parenthesisIndex(n);
	
	int k = 0;
	while (k >= 0)
	{
		if (k > 0 && parenthesisIndex[k] <= parenthesisIndex[k - 1])
			parenthesisIndex[k] = parenthesisIndex[k - 1] + 1;
		if (parenthesisIndex[k] > 2 * k)
		{
			if (k > 0)
			{
				parenthesisIndex[k - 1]++;
				parenthesisIndex[k] = 0;
				k--;
				continue;
			}
			else
				break;
		}

		if (k == n - 1)
		{
			string s;
			for (int i = 0; i < 2 * n; i++)
			{
				s.push_back(')');
			}
			for (int i = 0; i < n; i++)
			{
				s[parenthesisIndex[i]] = '(';
			}
			if (validParentheses(s))
				result.push_back(s);
			parenthesisIndex[k]++;
		}
		else
		{
			k++;
		}
	}
	return result;
}

bool String::validParentheses(string s)
{
	int len = s.length();
	if (len <= 1)
		return false;
	stack<char> parenthesis;

	
	for (int i = 0; i < len; i++)
	{
		if (s[i] == '(' || s[i] == '[' || s[i] == '{')
		{
			parenthesis.push(s[i]);
		}
		else if (s[i] == ')')
		{
			if (!parenthesis.empty() && parenthesis.top() == '(')
				parenthesis.pop();
			else
				return false;
		}
		else if (s[i] == ']')
		{
			if (!parenthesis.empty() && parenthesis.top() == '[')
				parenthesis.pop();
			else
				return false;
		}
		else if (s[i] == '}')
		{
			if (!parenthesis.empty() && parenthesis.top() == '{')
				parenthesis.pop();
			else
				return false;
		}
		
	}

	if (!parenthesis.empty())
		return false;
	
	return true;
}