You are given a string, S, and a list of words, L, that are all of the same length.
Find all starting indices of substring(s) in S that is a concatenation of each word in L exactly once and without any intervening characters.

For example, given:
S: "barfoothefoobarman"
L: ["foo", "bar"]

You should return the indices: [0,9].
(order does not matter).

写了一个简单的，深度遍历S中的每个位置作为开头的情况，结果正确，不过超时了。。。

vector<int> String::findSubstring(string S, vector<string>& L)
{
	vector<int> result;
	int wordCount = L.size();
	vector<bool> visited(wordCount, false);

	int wordLen = L[0].length();

	int appeared = 0;
	int index = 0;
	while (index < S.length())
	{
		string tempWord = S.substr(index, wordLen);
		bool flag = false;
		for (int i = 0; i < wordCount; i++)
		{
			if (!visited[i] && tempWord == L[i])
			{
				flag = true;
				visited[i] = 1;
				appeared++;
				break;
			}
		}
		if (!flag)
		{
			for (int i = 0; i < wordCount; i++)
				visited[i] = false;
			index -= appeared * wordLen;
			appeared = 0;
			index++;
		}
		else
		{
			index += wordLen;
			if (appeared == wordCount)
			{
				result.push_back(index - wordCount * wordLen);
				appeared = 0;
				for (int i = 0; i < wordCount; i++)
					visited[i] = false;
			}
			
		}
	}
	
	return result;
}

改变思路，先把每个开头对应的word找出来。这样就不会有重复工作了。

另外L中可能有重复的情况 也要处理。
所以之前那个程序是错的。

结果之间并不一定要不相交。

vector<int> String::findSubstring(string S, vector<string>& L)
{
	vector<int> result;
	int wordCount = L.size();
	int sLen = S.length();
	vector<int> wordIndex(sLen, -1);

	int wordLen = L[0].length();

	map<string, int> wordMap;
	for (auto it : L)
	{
		wordMap[it]++;
	}
	vector<int> expectedCount;
	vector<string> wordList;
	for (auto it : wordMap)
	{
		wordList.push_back(it.first);
		expectedCount.push_back(it.second);
	}

	int index = 0;
	while (index < sLen)
	{
		string tempWord = S.substr(index, wordLen);
		for (int i = 0; i < wordList.size(); i++)
		{
			if (tempWord == wordList[i])
			{
				wordIndex[index] = i;
				break;
			}
		}
		index++;
	}

	index = 0;
	
	vector<int> appearedCount(wordList.size());
	int appeared = 0;

	while (index < sLen)
	{
		if (wordIndex[index] == -1)
		{
			index -= appeared * wordLen;
			for (int i = 0; i < appearedCount.size(); i++)
				appearedCount[i] = 0;
			appeared = 0;
			index++;
		}
		else
		{
			if (appearedCount[wordIndex[index]] < expectedCount[wordIndex[index]])
			{
				appeared++;
				appearedCount[wordIndex[index]]++;
				index += wordLen;
				if (appeared == wordCount)
				{
					index -= appeared * wordLen;
					result.push_back(index);
					appeared = 0;
					for (int i = 0; i < appearedCount.size(); i++)
						appearedCount[i] = 0;
					index++;
				}
			}
			else
			{
				index -= appeared * wordLen;
				appeared = 0;
				for (int i = 0; i < appearedCount.size(); i++)
					appearedCount[i] = 0;
				index++;
			}
		}
	}


	return result;
}


