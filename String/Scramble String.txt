Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

首先有两个想法：
1.scrambled具有传递性。
2.看起来scrambled的范围很大，是不是只要包含了相同的字母，两个单词就是scrambled的了。

第二个观点是错误的，可以举反例证明。

这题可以递归的处理。

还是看题解，用了动态规划。


bool String::isScramble(string s1, string s2)
{
	int len = s1.length();
	if (len == 1)
		return s1 == s2;
	if (s1.length() != s2.length())
		return false;
		
	bool ***f = new bool**[len + 1];
	for (int i = 0; i < len + 1; i++)
	{
		f[i] = new bool*[len];
		for (int j = 0; j < len; j++)
		{
			f[i][j] = new bool[len];
			for (int k = 0; k < len; k++)
				f[i][j][k] = false;
		}
	}

	for (int i = 0; i < len; i++)
	{
		for (int j = 0; j < len; j++)
		{
			f[1][i][j] = s1[i] == s2[j];
		}
	}


	for (int n = 1; n <= len; n++)
	{
		for (int i = 0; i + n <= len; i++)
		{
			for (int j = 0; j + n <= len; j++)
			{
				for (int k = 1; k < n; k++)
				{
					if((f[k][i][j] && f[n - k][i + k][j + k]) ||
						(f[k][i][j + n - k] && f[n - k][i + k][j]))
					{
						f[n][i][j] = true;
						break;
					}

				}
			}
		}
	}

	bool result = f[len][0][0];

	for (int i = 0; i < len + 1; i++)
	{
		for (int j = 0; j < len; j++)
		{
			delete[] f[i][j];
		}
		delete[] f[i];
	}
	delete[] f;

	return result;
}
