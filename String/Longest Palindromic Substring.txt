Given a string S, find the longest palindromic substring in S. 
You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.


看了一下好像有好几种解。
我决定试着写两个。
一个是n2的动归。
一个是n的。

N2的好像一直超时。。。

string String::longestPalindrome(string s)
{
	int len = s.size();
	if (len == 0)
		return "";

	/*bool** f = new bool*[len];
	for (int i = 0; i < len; i++)
	{
		f[i] = new bool[len];
		for (int j = 0; j < len; j++)
			f[i][j] = false;
	}*/
	bool f[1000][1000];
	for (int i = 0; i < len; i++)
	{
		for (int j = 0; j < len; j++)
		{
			f[i][j] = false;
		}
	}

	int start = 0;
	int maxLen = 1;
	for (int i = 0; i < len; i++)
	{
		f[i][i] = true;
		for (int j = 0; j < i; j++)
		{
			if (s[i] == s[j] && (i < j + 2 || f[j + 1][i - 1]))
				f[j][i] = true;
			
			if (f[j][i] && i - j + 1 > maxLen)
			{
				maxLen = i - j + 1;
				start = j;
			}
		}
	}

	/*for (int i = 0; i < len; i++)
	{
		delete f[i];
	}
	delete f;*/
	cout << maxLen << endl;
	return s.substr(start, maxLen);
}

这里写了一个N的。

string String::longestPalindrome(string s)
{
	int len = s.size();
	if (len <= 1)
		return s;

	string newStr = "^";
	for (int i = 0; i < len; i++)
	{
		newStr.push_back('#');
		newStr.push_back(s[i]);
	}
	newStr.push_back('#');
	newStr.push_back('$');


	len = newStr.length();
	vector<int> p(len);
	int center = 0;
	int maxRight = 0;

	for (int i = 1; i < len - 1; i++)
	{
		if (maxRight > i)
		{
			p[i] = min(maxRight - i, p[2 * center - i]);
		}
		else
			p[i] = 0;

		while (newStr[i + p[i] + 1] == newStr[i - p[i] - 1])
			p[i]++;

		if (p[i] + i > maxRight)
		{
			center = i;
			maxRight = p[i] + i;
		}
	}

	int maxCenter = 1;
	for (int i = 1; i < len; i++)
	{
		if (p[i] > p[maxCenter])
			maxCenter = i;
	}
	int maxPLen = p[maxCenter];
	int left;
	int originCenter = (maxCenter - 1) / 2;
	left = originCenter - maxPLen / 2;
	
	return s.substr(left, maxPLen);
}
