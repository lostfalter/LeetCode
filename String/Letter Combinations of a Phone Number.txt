Given a digit string, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below.



Input:Digit string "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:
Although the above answer is in lexicographical order, your answer could be in any order you want.

vector<string> String::letterCombinations(string digits)
{
	vector<string> result;

	map<char, string> numberMap;
	numberMap['1'] = "";
	numberMap['2'] = "abc";
	numberMap['3'] = "def";
	numberMap['4'] = "ghi";
	numberMap['5'] = "jkl";
	numberMap['6'] = "mno";
	numberMap['7'] = "pqrs";
	numberMap['8'] = "tuv";
	numberMap['9'] = "wxyz";

	map<char, int> numberLen;
	numberLen['1'] = 0;
	numberLen['2'] = 3;
	numberLen['3'] = 3;
	numberLen['4'] = 3;
	numberLen['5'] = 3;
	numberLen['6'] = 3;
	numberLen['7'] = 4;
	numberLen['8'] = 3;
	numberLen['9'] = 4;

	

	int len = digits.length();
	if (len == 0)
	{
		result.push_back("");
		return result;
	}
	vector<int> count(len);

	int k = 0;
	while (k >= 0)
	{
		if (count[k] >= numberLen[digits[k]])
		{
			count[k] = 0;
			k--;
			if (k >= 0)
				count[k]++;
			continue;
		}

		if (k == len - 1)
		{
			string s;
			for (int i = 0; i < len; i++)
			{
				s.push_back(numberMap[digits[i]][count[i]]);
			}
			result.push_back(s);

			count[k]++;
		}
		else
		{
			k++;
		}
	}
	return result;
}