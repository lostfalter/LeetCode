Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.

这个我之前居然AC了，看了下提交的历史，好像一开始就在正确的道路上了。
现在却没什么思路。
这种慢慢替换查找的复杂写法，确实不在我的第一反应之中。

int String::ladderLength(string start, string end, unordered_set<string>& dict)
{
	if (dict.size() == 0)
		return 0; 
	if (start == end)
		return 0;

	queue<string> Q;
	Q.push(start);

	string word;
	string newWord;

	map<string, int> visited;
	for (auto it = dict.begin(); it != dict.end(); it++)
	{
		visited[*it] = 0;
	}
	visited[start] = 1;

	int wordLen = start.length();
	int count = 0;
	bool flag = false;
	while (!Q.empty())
	{
		word = Q.front();
		Q.pop();
		
		for (int i = 0; i < wordLen; i++)
		{
			newWord = word;
			for (char c = 'a'; c <= 'z'; c++)
			{
				newWord[i] = c;
				if (newWord == word)
					continue;
				else if (newWord == end)
				{
					flag = true;
					count = visited[word] + 1;
					break;
				}
				else
				{
					if (dict.find(newWord) != dict.end() && !visited[newWord])
					{
						
						visited[newWord] = visited[word] + 1;
						Q.push(newWord);
					}
				}
			}
			if (flag)
				break;

		}
		if (flag)
			break;
	}	

	if (flag)
		return count;
	else
		return 0;
}
