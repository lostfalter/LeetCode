Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

寻找最长的合法括号配对。

可以由GenerateParenthese改造。

还是直接判断比较好一些。

int String::longestValidParentheses(string s)
{
	int len = s.length();
	if (len <= 1)
		return 0;
	stack<int> parenthesis;

	int count = 0;
	int max = 0;

	vector<int> parentheseIndex(len);

	for (int i = 0; i < len; i++)
	{
		if (s[i] == '(')
		{
			parenthesis.push(i);
		}
		else
		{
			if (!parenthesis.empty())
			{
				parentheseIndex[parenthesis.top()] = i;
				parenthesis.pop();
			}
		}
	}

	count = 0;
	int index = 0;
	while (index < len)
	{
		if (parentheseIndex[index] > 0)
		{
			count += parentheseIndex[index] - index + 1;
			index = parentheseIndex[index] + 1;
		}
		else
		{
			if (count > max)
				max = count;
			count = 0;
			index++;
		}
	}

	if (count > max)
		max = count;

	return max;
}
