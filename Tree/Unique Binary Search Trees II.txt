iven n, generate all structurally unique BST's (binary search trees) that store values 1...n.

For example,
Given n = 3, your program should return all 5 unique BST's shown below.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

依据上题得到的规律依次生成左右子树。


vector<TreeNode*> BinaryTree::generateTrees(int n)
{
	vector<TreeNode*> result;
	if (n == 0)
	{
		result.push_back(NULL);
		return result;
	}

	return generate(1, n);
}

vector<TreeNode*> BinaryTree::generate(int start, int end)
{
	vector<TreeNode*> result;
	if (start > end)
	{
		result.push_back(NULL);
		return result;
	}

	for (int i = start; i <= end; i++)
	{
		vector<TreeNode*> left = generate(start, i - 1);
		vector<TreeNode*> right = generate(i + 1, end);
		for (auto leftTree : left)
		{
			for (auto rightTree : right)
			{
				TreeNode* root = new TreeNode(i);
				root->left = leftTree;
				root->right = rightTree;
				result.push_back(root);
			}
		}
	}

	return result;
}