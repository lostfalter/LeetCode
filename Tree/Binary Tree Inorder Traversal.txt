Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree {1,#,2,3},
   1
    \
     2
    /
   3
return [1,3,2].

Note: Recursive solution is trivial, could you do it iteratively?

confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


vector<int> BinaryTree::inorderTraversal(TreeNode* root)
{
	vector<int> traversal;
	if (root == NULL)
		return traversal;

	TreeNode* p = NULL;
	stack<TreeNode*> path;
	stack<int> direct;


	path.push(root);
	direct.push(0);
	while (!path.empty())
	{
		p = path.top();
		if (direct.top() > 1)
		{
			direct.pop();
			path.pop();
			if (!path.empty())
			{
				direct.top()++;
			}
			continue;
		}

		if (direct.top() == 0)
		{
			if (p->left)
			{
				path.push(p->left);
				direct.push(0);
			}
			else
			{
				direct.top()++;
			}
		}
		else
		{
			traversal.push_back(p->val);
			if (p->right)
			{
				path.push(p->right);
				direct.push(0);
			}
			else
			{
				direct.top()++;
			}
		}

	}
	return traversal;
}

