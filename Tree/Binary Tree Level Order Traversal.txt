Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

广度优先遍历。

vector<vector<int>> BinaryTree::levelOrder(TreeNode* root)
{
	vector<vector<int>> result;
	if (root == NULL)
		return result;

	queue<TreeNode*> Q;
	TreeNode* node;

	int count = 0;
	int levelMax = 1;
	Q.push(root);
	vector<int> level;

	while (!Q.empty())
	{
		node = Q.front();
		Q.pop();
		level.push_back(node->val);

		if (node->left)
			Q.push(node->left);
		if (node->right)
			Q.push(node->right);

		count++;
		if (count == levelMax)
		{
			count = 0;
			levelMax = Q.size();
			result.push_back(level);
			level.clear();
		}
	}
	
	if (!level.empty())
		result.push_back(level);
	
	return result;
}