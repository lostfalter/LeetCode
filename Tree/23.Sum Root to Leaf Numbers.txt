Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

将根节点到叶子节点路径上的值组成数字，返回这些数字的合。

初步的想法是深度遍历所有叶子，找到路径，形成数字存储起来即可，用栈记录路径。

int BinaryTree::sumNumbers(TreeNode* root)
{	
	int sum = 0;
	if (root == NULL)
		return sum;


	TreeNode* p = NULL;
	vector<TreeNode*> path;
	stack<int> direct;


	path.push_back(root);
	direct.push(0);
	while (!path.empty())
	{
		p = path.back();
		if (direct.top() > 1)
		{
			if (p->left == NULL && p->right == NULL)
			{
				int temp = 0;
				for (int i = 0; i < path.size(); i++)
				{
					temp = temp * 10 + path[i]->val;
				}
				sum += temp;
			}
			direct.pop();
			path.pop_back();
			if (!path.empty())
				direct.top()++;
			continue;
		}

		if (direct.top() == 0)
		{
			if (p->left)
			{
				path.push_back(p->left);
				direct.push(0);
			}
			else
			{
				direct.top()++;
			}
		}
		else
		{
			if (p->right)
			{
				path.push_back(p->right);
				direct.push(0);
			}
			else
			{
				direct.top()++;
			}
		}

	}
	return sum;
}



