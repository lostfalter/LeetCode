Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]
confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.

看起来应该用层次遍历。

vector<vector<int>> BinaryTree::zigzagLevelOrder(TreeNode* root)
{
	vector<vector<int>> result;
	if (root == NULL)
		return result;

	queue<TreeNode*> Q;
	Q.push(root);
	bool flag = true;
	vector<int> level;
	int levelMax = 1;
	int count = 0;
	TreeNode* node = NULL;

	while (!Q.empty())
	{
		node = Q.front();
		Q.pop();
		
		count++;
		level.push_back(node->val);

		if (node->left)
			Q.push(node->left);
		if (node->right)
			Q.push(node->right);


		if (count == levelMax)
		{
			count = 0;
			levelMax = Q.size();
			if (flag)
			{
				result.push_back(level);
			}
			else
			{
				reverse(level.begin(), level.end());
				result.push_back(level);
			}
			level.clear();
			flag = !flag;
		}
	}
	return result;
}