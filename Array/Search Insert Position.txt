Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0

看起来应该是二分查找。

二分查找确实如传说中所言，特别容易错。

int Solution::searchInsert(int A[], int n, int target)
{
	if (A == NULL || n == 0)
		return 0;

	int left = 0;
	int right = n - 1;
	int mid;
	while (left < right)
	{
		mid = (left + right) >> 1;
		if (A[mid] == target)
			return mid;
		else if (A[mid] < target)
		{
			left = mid + 1;
		}
		else
		{
			right = mid - 1;
		}
	}
	if (A[left] == target)
		return left;
	else if (A[left] < target)
		return left + 1;
	else
		return left;
	return left;
}