Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

好像结果还要求是正序。

static bool Solution::intervalCmp(const Interval& a, const Interval& b)
{ 
	return a.start < b.start;
}

vector<Interval> Solution::insert(vector<Interval>& intervals, Interval newInterval)
{
	intervals.push_back(newInterval);
	sort(intervals.begin(), intervals.end(), intervalCmp);
	
	int len = intervals.size();

	stack<Interval> s;
	s.push(intervals[0]);
	Interval interval;
	for (int i = 1; i < len; i++)
	{
		if (intervals[i].start <= s.top().end)
		{
			if (intervals[i].end > s.top().end)
				s.top().end = intervals[i].end;
		}
		else
			s.push(intervals[i]);
	}

	vector<Interval> result;
	while (!s.empty())
	{
		result.push_back(s.top());
		s.pop();
	}
	std::reverse(result.begin(), result.end());
	return result;
}