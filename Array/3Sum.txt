Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
	
Output Limit Exceeded时，思考结果是否太多重复的。

vector<vector<int>> Solution::threeSum(vector<int>& num)
{
	vector<vector<int>> result;
	sort(num.begin(), num.end());

	int len = num.size();
	if (len < 3)
		return result;

	int index1, index2;

	for (int i = 0; i < len; i++)
	{
		if (i > 0 && num[i] == num[i - 1])
			continue;
		index1 = i + 1;
		index2 = len - 1;
		while (index1 < index2)
		{
			int sum = num[i] + num[index1] + num[index2];
			
			if (sum == 0)
			{
				vector<int> triple;

				triple.push_back(num[i]);
				triple.push_back(num[index1]);
				triple.push_back(num[index2]);
				
				result.push_back(triple);
				index1++;
				while (index1 < len && num[index1] == num[index1 - 1])
					index1++;
				index2--;
			}
			else if (sum < 0)
				index1++;
			else
				index2--;
		}
	}
	return result;
}