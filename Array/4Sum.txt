Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
	
	
判断是否重复太麻烦了，直接把结果放进set里，最后在转成vector输出。

vector<vector<int>> Solution::fourSum(vector<int>& num, int target)
{
	sort(num.begin(), num.end());
	vector<vector<int>> result;
	set<vector<int>> tempResult;
	int len = num.size();
	for (int i = 0; i < len - 3; i++)
	{
		for (int j = i + 1; j < len - 2; j++)
		{
			int m = j + 1;
			int n = len - 1;
			while (m < n)
			{
				
				int sum = num[i] + num[j] + num[m] + num[n];
				if (sum == target)
				{
					vector<int> temp;
					temp.push_back(num[i]);
					temp.push_back(num[j]);
					temp.push_back(num[m]);
					temp.push_back(num[n]);

					tempResult.insert(temp);
					m++;
					n--;
					
				}
				else if (sum < target)
				{
					m++;
				}
				else
				{
					n--;
				}
			}
		}
	}
	for (auto it = tempResult.begin(); it != tempResult.end(); it++)
	{
		result.push_back(*it);
	}
	return result;
}