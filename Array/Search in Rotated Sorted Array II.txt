Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

先试试分离版的。

int Solution::findPivot(int A[], int n)
{
	if (n == 0)
		return false;

	int pivot = 0;
	int left = 0;
	int right = n - 1;
	int mid;
	while (left < right)
	{
		mid = (left + right) >> 1;
		if (mid > 0 && A[mid] < A[mid - 1])
		{
			pivot = mid;
			break;
		}
		else if (A[mid] > A[left])
		{
			left = mid;
		}
		else if (A[mid] < A[left])
		{
			right = mid;
		}
		else
		{
			left++;
		}
	
	}

	if (left > 0 && A[left] < A[left - 1])
		pivot = left; 

	return pivot;
}

int Solution::searchInRotatedArray2(int A[], int n, int target)
{
	if (n == 0)
		return -1;

	int pivot = findPivot(A, n);

	int left = 0;
	int right = n - 1;
	int mid;
	while (left < right)
	{
		mid = (left + right) >> 1;
		if (A[(mid + pivot) % n] == target)
			return (mid + pivot) % n;
		else if (A[(mid + pivot) % n] > target)
		{
			right = mid - 1;
		}
		else
		{
			left = mid + 1;
		}
	}

	if (A[(left + pivot) % n] == target)
		return (left + pivot) % n;
	else
		return -1;
}

然后看看一次的版本。思路梳理（看完题解）后更清晰了一些。

bool Solution::searchInRotateWithDup(int A[], int n, int target)
{
	if (n == 0)
		return false;

	int left = 0;
	int right = n - 1;
	int mid;
	while (left < right)
	{
		mid = (left + right) >> 1;
		if (A[mid] == target)
			return true;
		else if (A[mid] > A[left])
		{
			if (A[mid] > target && A[left] <= target)
			{
				right = mid - 1;
			}
			else
			{
				left = mid + 1;
			}
		}
		else if (A[mid] < A[left])
		{
			if (A[mid] < target && A[right] >= target)
			{
				left = mid + 1;
			}
			else
			{
				right = mid - 1;
			}
		}
		else
			left++;
	}

	if (A[left] == target)
		return true;
	else
		return false;
}