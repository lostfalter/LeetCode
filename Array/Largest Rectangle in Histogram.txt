Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.


Above is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].


The largest rectangle is shown in the shaded area, which has area = 10 unit.

For example,
Given height = [2,1,5,6,2,3],
return 10.

看了网上的答案之后才开窍。
枚举所有以bar x 为最低高度的矩形面积，找到最大的一块就可以了。
到这里还是不知道怎么做，因为要知道以bar x为最低高度的矩形，需要知道往左第一个比x矮的bar，往右第一个比x矮的bar。
直接抄袭了网上的思路，维持一个栈，栈里面放着bar的坐标，当一个bar的高度比栈顶的值大时，就放进栈。
当遇到bar的高度小于栈顶时，就可以弹出栈顶元素，栈顶的bar最左最右的第一个比他矮的bar坐标就知道了，就可以计算面积了。


int Solution::largestRectangleArea(vector<int>& height)
{
	stack<int> s;
	int len = height.size();
	if (len == 0)
		return 0;
	int index = 0;
	int maxArea = 0;
	int area;
	int smallBarIndex;
	while (index < len)
	{
		if (s.empty() || height[index] >= height[s.top()])
		{
			s.push(index++);
		}
		else
		{
			smallBarIndex = s.top();
			s.pop();
			area = height[smallBarIndex] * (s.empty() ? index : index - s.top() - 1);
			if (area > maxArea)
				maxArea = area;
		}
	}

	while (!s.empty())
	{
		smallBarIndex = s.top();
		s.pop();
		area = height[smallBarIndex] * (s.empty() ? index : index - s.top() - 1);
		if (area > maxArea)
			maxArea = area;
	}

	return maxArea;
}
