Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6

逆波兰式计算
我用栈来实现这个问题。
其中涉及使用数字拼接字符串的问题。
依次将表达式中的值压入栈中，每当遇到一个操作符时便弹出栈顶的两个值，然后重新压入栈中。
注意，tokens中的数字可能是负数。

int Solution::evalRPN(vector<string> &tokens)
{
	string tempStr;
	string newNumStr;
	vector<int> numStack;
	int stackLen = 0;
	int newNum;
	for (auto it = tokens.begin(); it != tokens.end(); it++)
	{
		tempStr = *it;
		if (tempStr == "+")
		{
			numStack[stackLen - 2] = numStack[stackLen - 2] + numStack[stackLen - 1];
			stackLen--;
			numStack.pop_back();
		}
		else if (tempStr == "-")
		{
			numStack[stackLen - 2] = numStack[stackLen - 2] - numStack[stackLen - 1];
			stackLen--;
			numStack.pop_back();
		}
		else if (tempStr == "*")
		{
			numStack[stackLen - 2] = numStack[stackLen - 2] * numStack[stackLen - 1];
			stackLen--;
			numStack.pop_back();
		}
		else if (tempStr == "/")
		{
			numStack[stackLen - 2] = numStack[stackLen - 2] / numStack[stackLen - 1];
			stackLen--;
			numStack.pop_back();
		}
		else
		{
			//数字，开始拼接
			int tempNum = 0;
			bool negative = false;
			if (tempStr[0] == '-')
				negative = true;
			else
				tempNum = tempStr[0] - '0';
			for (int i = 1; i < tempStr.length(); i++)
			{
				tempNum = tempNum * 10 + (tempStr[i] - '0');
			}
			if (negative)
				tempNum = -tempNum;
			numStack.push_back(tempNum);
			stackLen++;
		}
		
	}
	return numStack[0];
}