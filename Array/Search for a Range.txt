Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4]

在排好序的数组中查找。
二分查找的变体吧。

vector<int> result;
	if (A == NULL || n == 0)
		return result;
	bool flag = false;
	int left = 0;
	int right = n - 1;
	int mid;
	
	while (left < right)
	{
		mid = (left + right) >> 1;

		if (A[mid] == target)
		{
			flag = true;
			right = mid - 1;
		}
		else if (A[mid] < target)
		{
			left = mid + 1;
		}
		else
		{
			right = mid - 1;
		}
	}

	if (A[left] == target)
		flag = true;
	if (!flag)
	{
		result.push_back(-1);
		result.push_back(-1);
		return result;
	}

	if (A[left] < target)
		result.push_back(left + 1);
	else
		result.push_back(left);

	left = 0;
	right = n - 1;
	while (left < right)
	{
		mid = (left + right) >> 1;

		if (A[mid] == target)
		{
			left = mid + 1;
		}
		else if (A[mid] < target)
		{
			left = mid + 1;
		}
		else
		{
			right = mid - 1;
		}
	}
	if (A[right] > target)
		result.push_back(right - 1);
	else
		result.push_back(right);

	return result;