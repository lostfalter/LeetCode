Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.

二维数组查找。

bool Solution::searchMatrix(vector<vector<int>>& matrix, int target)
{
	int m = matrix.size();
	int n = matrix[0].size();
	
	return search2D(matrix, 0, m - 1, 0, n - 1, target);
}

bool Solution::search2D(vector<vector<int>>& matrix,
			  int startRow,
		      int endRow,
			  int startCol,
			  int endCol,
			  int target)
{
	if (startRow > endRow || startCol > endCol)
		return false;
	int midRow = (startRow + endRow) / 2;
	int midCol = (startCol + endCol) / 2;
	int mid = matrix[midRow][midCol];
	if (mid == target)
		return true;
	else if (mid > target)
	{
		return search2D(matrix, startRow, endRow, startCol, midCol - 1, target) || 
			   search2D(matrix, startRow, midRow - 1, midCol, endCol, target);
	}
	else
	{
		return search2D(matrix, startRow, endRow, midCol + 1, endCol, target) ||
			   search2D(matrix, midRow + 1, endRow, startCol, midCol, target);
	}
}

虽然对了，但是理解题意错了，题中数组是一行一行递增的，并没有列中的递增。。。
按照题意应该是下面这种。。。

bool Solution::searchMatrix2(vector<vector<int>>& matrix, int target)
{	
	int m = matrix.size();
	int n = matrix[0].size();

	int first = 0;
	int last = m * n - 1;
	while (first < last)
	{
		int mid = (first + last) >> 1;
		if (matrix[mid / n][mid % n] == target)
			return true;
		else if (matrix[mid / n][mid % n] > target)
			last = mid - 1;
		else
			first = mid + 1;
	}
	if (matrix[first / n][first % n] == target)
		return true;
	else
		return false;
}
