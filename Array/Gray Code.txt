The gray code is a binary numeral system where two successive values differ in only one bit.

Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.

For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:

00 - 0
01 - 1
11 - 3
10 - 2
Note:
For a given n, a gray code sequence is not uniquely defined.

For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.

For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.

给定N，生成gray code。过程如例子所示。

给定N，应该就有2的N次方个GRAY CODE。

简单模拟后，觉得n的gray code应该和n-1的gray code有关系。
写出N=3的时候的序列，可以找到规律。

vector<int> Solution::grayCode(int n)
{
	vector<int> result;
	
	if (n == 0)
	{
		result.push_back(0);
		return result;
	}

	vector<int> level(n);
	vector<int> k(n);
	vector<int> number(n);
	k[0] = 1;
	for (int i = 1; i < n; i++)
		k[i] = k[i - 1] * 2;

	vector<int> state = { 0, 1, 1, 0 };

	int count = k[n - 1] * 2;
	int grayCode;
	int index = 0;
	while (index < count)
	{
		grayCode = 0;
		for (int i = n - 1; i >= 0; i--)
		{
			grayCode = 2 * grayCode + number[i];
		}

		result.push_back(grayCode);
		for (int i = 0; i < n; i++)
		{
			level[i]++;
			number[i] = state[(level[i] / k[i]) % 4];
		}
		
		index++;
	}
	return result;
}