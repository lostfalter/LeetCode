Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [−2,1,−3,4,−1,2,1,−5,4],
the contiguous subarray [4,−1,2,1] has the largest sum = 6.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

最大子段和。


int Solution::maxSubArray(int A[], int n)
{
	if (n == 0)
		return 0;

	vector<int> m(n);
	m[0] = A[0];

	int max = A[0];

	for (int i = 1; i < n; i++)
	{
		if (A[i] > A[i] + m[i - 1])
			m[i] = A[i];
		else
			m[i] = A[i] + m[i - 1];

		if (m[i] > max)
			max = m[i];
	}
	return max;
}