Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 

想不出好的方法，使用深度优先搜索加剪枝试试。

竟然一次AC。
莫非这题只考察深度优先遍历吗。

vector<vector<int>> Solution::combinationSum(vector<int>& candidates, int target)
{
	vector<vector<int>> result;
	int len = candidates.size();
	sort(candidates.begin(), candidates.end());

	vector<int> count(len);
	vector<int> currentSum(len);
	int k = 0;
	while (k >= 0 && k < len)
	{
		if (k > 0)
			currentSum[k] = currentSum[k - 1] + candidates[k] * count[k];
		else
			currentSum[k] = candidates[k] * count[k];
		if (currentSum[k] == target)
		{
			vector<int> solution;
			for (int i = 0; i <= k; i++)
			{
				for (int j = 0; j < count[i]; j++)
					solution.push_back(candidates[i]);
			}
			result.push_back(solution);
			count[k] = 0;
			k--;
			if (k >= 0)
				count[k]++;
		}
		else if (currentSum[k] > target)
		{
			count[k] = 0;
			k--;
			if (k >= 0)
				count[k]++;
		}
		else
		{
			if (k + 1 < len)
			{
				k++;
			}
			else
			{
				count[k]++;
			}
		}
	}
	return result;
}

