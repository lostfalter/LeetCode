Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place, do not allocate extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

输出下一个全排列。

从右到左找一个升序的序列，然后将序列左边的数与序列中第一个大于他的数交换，重排整个序列。

void Solution::nextPermutation(vector<int>& num)
{
	int len = num.size();

	if (len == 1)
		return;

	int temp;

	int index = len - 2;
	while (index >= 0)
	{
		if (num[index] >= num[index + 1])
			index--;
		else
			break;
	}

	if (index >= 0)
	{
		int changeNumber = len - 1;
		while (changeNumber > index)
		{
			if (num[changeNumber] > num[index])
				break;
			changeNumber--;
		}

		temp = num[index];
		num[index] = num[changeNumber];
		num[changeNumber] = temp;
	}
	

	int left = index + 1;
	int right = len - 1;
	while (left < right)
	{
		temp = num[left];
		num[left] = num[right];
		num[right] = temp;

		left++;
		right--;
	}
	
}