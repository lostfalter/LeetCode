Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].


全排列。


复杂度好像略高。不过一次就AC了非递归版本，我觉得不错了。


vector<vector<int>> Solution::permute(vector<int>& num)
{
	sort(num.begin(), num.end());

	int len = num.size();
	
	vector<int> swap(len);
	vector<int> sequence = num;

	vector<vector<int>> result;

	int k = 0;
	while (k >= 0)
	{
		if (swap[k] + k >= len)
		{
			swap[k] = 0;
			k--;
			if (k >= 0)
				swap[k]++;
			continue;
		}

		if (k == len - 1)
		{
			vector<int> newSequence = sequence;
			for (int i = 0; i < len - 1; i++)
			{
				int temp = newSequence[i];
				newSequence[i] = newSequence[i + swap[i]];
				newSequence[i + swap[i]] = temp;
			}
			result.push_back(newSequence);
			k--;
			if (k >= 0)
				swap[k]++;
		}
		else
		{
			k++;
		}

	}

	return result;
}

好像是因为case的规模不够大，所以我没有超时。
下面给一种通常的解法。

vector<vector<int>> Solution::permute(vector<int>& num)
{
	sort(num.begin(), num.end());

	int len = num.size();
	vector<vector<int>> result;


	vector<int> factorial(len + 1);
	factorial[0] = 1;
	for (int i = 1; i <= len; i++)
		factorial[i] = factorial[i - 1] * i;
	for (int i = 0; i < factorial[len]; i++)
	{
		result.push_back(num);
		nextPermutation(num);
	}
	return result;
}

void Solution::nextPermutation(vector<int>& num)
{
	int len = num.size();

	if (len == 1)
		return;

	int temp;

	int index = len - 2;
	while (index >= 0)
	{
		if (num[index] >= num[index + 1])
			index--;
		else
			break;
	}

	if (index >= 0)
	{
		int changeNumber = len - 1;
		while (changeNumber > index)
		{
			if (num[changeNumber] > num[index])
				break;
			changeNumber--;
		}

		temp = num[index];
		num[index] = num[changeNumber];
		num[changeNumber] = temp;
	}
	

	int left = index + 1;
	int right = len - 1;
	while (left < right)
	{
		temp = num[left];
		num[left] = num[right];
		num[right] = temp;

		left++;
		right--;
	}
	
}