Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.

注意细节。

ListNode* LinkedList::reverseBetween(ListNode* head, int m, int n)
{
	if (head == NULL || head->next == NULL)
		return head;

	ListNode* fakeHead = new ListNode(-1);
	fakeHead->next = head;

	ListNode* tempLastNode = NULL;

	ListNode* node = fakeHead;
	ListNode* preNode = NULL;
	ListNode* nextNode = NULL;
	ListNode* preLink = NULL;

	int count = -1;
	while (node)
	{
		nextNode = node->next;
		count++;

		if (count == m - 1)
		{
			preLink = node;
		}
		else if (count >= m && count <= n)
		{
			node->next = preNode;
			if (preNode == NULL)
				tempLastNode = node;
			preNode = node;
		}
		else if (count == n + 1)
		{
			preLink->next = preNode;
			tempLastNode->next = node;
			preNode = NULL;
		}
		node = nextNode;
	}

	if (preNode != NULL)
	{
		preLink->next = preNode;
		tempLastNode->next = NULL;
	}

	

	head = fakeHead->next;
	delete fakeHead;
	return head;
}