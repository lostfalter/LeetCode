Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.

You may not alter the values in the nodes, only nodes itself may be changed.

Only constant memory is allowed.

For example,
Given this linked list: 1->2->3->4->5

For k = 2, you should return: 2->1->4->3->5

For k = 3, you should return: 3->2->1->4->5

将链表节点成组逆转。主要考察基本操作吧。

ListNode* LinkedList::reverseKGroup(ListNode* head, int k)
{
	if (head == NULL || head->next == NULL || k <= 1)
		return head;

	ListNode* fakeHead = new ListNode(-1);
	fakeHead->next = head;
	ListNode* lastNode = fakeHead;
	ListNode* node = head;
	ListNode* nextNode = NULL;
	ListNode* preNode = NULL;
	
	while (node)
	{
		ListNode* temp = node;
		
		int count = 0;
		while (count < k && node)
		{
			node = node->next;
			count++;
		}
		
		if (count < k)
		{
			lastNode->next = temp;
			break;
		}

		node = temp;
		preNode = node;
		node = node->next;
		count = 0;
		while (count < k - 1)
		{
			nextNode = node->next;
			node->next = preNode;
			preNode = node;
			node = nextNode;
			count++;
		}
		
		lastNode->next = preNode;
		lastNode = temp;
		lastNode->next = NULL;

		node = nextNode;
	}

	head = fakeHead->next;
	delete fakeHead;
	return head;
}