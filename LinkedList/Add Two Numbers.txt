You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

相加两个数，数字用链表逆序表示。

ListNode* LinkedList::addTwoNumbers(ListNode* l1, ListNode* l2)
{
	if (l1 == NULL)
		return l2;
	if (l2 == NULL)
		return l1;

	int carry = 0;
	ListNode* p1 = l1;
	ListNode* p2 = l2;

	ListNode* head = new ListNode(-1);
	ListNode* lastNode = head;
	int temp;
	while (p1 && p2)
	{
		temp = p1->val + p2->val + carry;
		carry = temp / 10;
		ListNode* node = new ListNode(temp % 10);
		lastNode->next = node;
		lastNode = node;
		p1 = p1->next;
		p2 = p2->next;
	}

	while (p1)
	{
		temp = p1->val + carry;
		carry = temp / 10;
		ListNode* node = new ListNode(temp % 10);
		lastNode->next = node;
		lastNode = node;
		p1 = p1->next;
	}

	while (p2)
	{
		temp = p2->val + carry;
		carry = temp / 10;
		ListNode* node = new ListNode(temp % 10);
		lastNode->next = node;
		lastNode = node;
		p2 = p2->next;
	}

	if (carry)
	{
		ListNode* node = new ListNode(carry);
		lastNode->next = node;
		lastNode = node;
	}

	ListNode* node = head;
	head = head->next;
	delete node;
	return head;
}